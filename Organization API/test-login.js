// Path: /test-login.js
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö login ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
const bcrypt = require('bcryptjs');

async function testLogin() {
    console.log('üîç Testing Login System\n');
    
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á hash
    console.log('1Ô∏è‚É£ Creating fresh password hashes:');
    const password = 'admin123';
    const hash1 = await bcrypt.hash(password, 10);
    const hash2 = await bcrypt.hash(password, 10);
    
    console.log(`   Password: ${password}`);
    console.log(`   Hash 1: ${hash1}`);
    console.log(`   Hash 2: ${hash2}`);
    console.log(`   Note: Hashes are different each time (this is normal)\n`);
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
    console.log('2Ô∏è‚É£ Testing password verification:');
    console.log(`   Comparing '${password}' with hash1: ${await bcrypt.compare(password, hash1) ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`   Comparing '${password}' with hash2: ${await bcrypt.compare(password, hash2) ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`   Comparing 'wrong' with hash1: ${await bcrypt.compare('wrong', hash1) ? '‚ùå FAIL' : '‚úÖ PASS (should be false)'}`);
    
    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö hash ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    console.log('\n3Ô∏è‚É£ Testing system hashes:');
    const systemHashes = [
        '$2a$10$YwQ8.0ykpZMoVH7rGvxRZexTKNl0GvfGCHrHvEMDJFP.W9B9o/Jru',
        '$2a$10$5dK3hFwGpuBzKp8jQ7yQKuG1h0E5HqkBvNbXzX9mI8XoW3BvZ7uW.',
        '$2a$10$8VxGpH2mKXO0XBgYO8RqB.6RqZKiCvM5vQGnXfVZ4iL5aTpI3Kfnq'
    ];
    
    for (const hash of systemHashes) {
        const result = await bcrypt.compare('admin123', hash);
        console.log(`   Hash: ${hash.substring(0, 30)}...`);
        console.log(`   Valid for 'admin123': ${result ? '‚úÖ YES' : '‚ùå NO'}\n`);
    }
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    console.log('4Ô∏è‚É£ Generated correct hashes for auth.js:');
    const adminHash = await bcrypt.hash('admin123', 10);
    const userHash = await bcrypt.hash('user123', 10);
    
    console.log('\nüìã Copy this to your auth.js file:\n');
    console.log(`const users = {
    admin: {
        id: 1,
        username: 'admin',
        email: 'admin@organization.com',
        // Password: admin123
        password: '${adminHash}',
        role: 'admin',
        permissions: ['read', 'write', 'delete', 'manage_users']
    },
    user: {
        id: 2,
        username: 'user',
        email: 'user@organization.com',
        // Password: user123
        password: '${userHash}',
        role: 'user',
        permissions: ['read']
    }
};`);
    
    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ hash ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    console.log('\n5Ô∏è‚É£ Verifying new hashes:');
    console.log(`   admin123 + new admin hash: ${await bcrypt.compare('admin123', adminHash) ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`   user123 + new user hash: ${await bcrypt.compare('user123', userHash) ? '‚úÖ PASS' : '‚ùå FAIL'}`);
}

testLogin().catch(console.error);